#include <stdio.h>
#include <stdlib.h>
#define MAX 100
struct Edge {
    int u, v, weight;
};
int parent[MAX];
int find(int i) {
    while (i != parent[i])
        i = parent[i];
    return i;
}
void unionSet(int u, int v) {
    int a = find(u);
    int b = find(v);
    parent[a] = b;
}
void kruskal(struct Edge edges[], int n, int e) {
    struct Edge result[MAX];
    int i, j;
    int count = 0;

    for (i = 0; i < n; i++)
        parent[i] = i;

    for (i = 0; i < e - 1; i++) {
        for (j = 0; j < e - i - 1; j++) {
            if (edges[j].weight > edges[j + 1].weight) {
                struct Edge temp = edges[j];
                edges[j] = edges[j + 1];
                edges[j + 1] = temp;
            }
        }
    }

    for (i = 0; i < e; i++) {
        int u = edges[i].u;
        int v = edges[i].v;

        if (find(u) != find(v)) {
            result[count++] = edges[i];
            unionSet(u, v);
        }
    }

    printf("Edge \tWeight\n");
    for (i = 0; i < count; i++)
        printf("%d - %d \t%d\n", result[i].u, result[i].v, result[i].weight);
}
int main() {
    struct Edge edges[MAX];
    int n, e;

    printf("Enter number of vertices: ");
    scanf("%d", &n);
    printf("Enter number of edges: ");
    scanf("%d", &e);
    printf("Enter each edge (u v weight):\n");

    for (int i = 0; i < e; i++)
        scanf("%d %d %d", &edges[i].u, &edges[i].v, &edges[i].weight);
    kruskal(edges, n, e);
    return 0;
}

OUTPUT:
Enter number of vertices: 4
Enter number of edges: 5
Enter edges (source vertex, destination vertex, weight):
0 1 10
0 2 6
0 3 5
1 3 15
2 3 4


Edge    Weight
2 - 3    4
0 - 3    5
0 - 1    10
Total weight of MST: 19
